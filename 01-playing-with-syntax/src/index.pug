doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Playing with syntax

    link(rel='stylesheet', type='text/css', href='build/build.css')
    link(rel='stylesheet', type='text/css', href='css/bee-grid.min.css')
  body

    article.deck

      section.yellow
        h1.big-title ES6
        p Playing with syntax

      section.yellow
        .layout-1
          header
            h1.title Variables declared with <code>var</code>
          main
            .grid-container-fluid.cols-1
              p The variables that are declared using the <code>var</code> keyword are called <strong>function scoped variables</strong>
              p The function scoped variables are accessible globally to the script, that is, throughout the script, if declared outside a function. Similarly, if the function scoped variables are declared inside a function, then they become accessible throughout the function, but not outside the function.
              .grid-item.justify-self-center
                code.language-javascript.
                  var a = 12; //accessible globally

                  function myFunction() {
                    console.log(a);
                    var b = 13; //accessible throughout function

                    if (true) {
                      var c = 14; //accessible throughout function
                      console.log(b);
                    }

                    console.log(c);
                  }

                  myFunction();
              p Here, you can see that the c variable is accessible outside the if statement, but this is not the case in other programming languages. So, the programmers coming from other languages would expect the c variable to be undefined outside the if statement, but that's not the case.

      section.yellow
        .layout-1
          header
            h1.title Variables declared with <code>var</code> (2)
          main
            .grid-container-fluid.cols-1
              .grid-item.justify-self-center
                code.language-javascript.
                  for (var c = 0; c < 3; c++) {
                    ...
                  }
                  console.log(c);  // 3

              .grid-item
                p The variable <code>c</code> is declared in a for loop, but it is also lies in the global scope.

              .grid-item.justify-self-center
                code.language-javascript.
                  function doSomething() {
                    var d = 4;
                  }
                  console.log(d);  // ReferenceError: d is not defined

              .grid-item
                p The variable <code>d</code> is declared in his own scope. It's inside a function and only function creates new scopes.

      section.yellow
        .layout-1
          header
            h1.title Declaring block scoped variables
          main
            .grid-container-fluid.cols-1
              .grid-item
                p Variables that are declared using the <code>let</code> keyword are called as block scoped variables. The block scoped variables behave the same way as the function scoped variables when declared outside a function, that is, they are accessible globally. But when the block scoped variables are declared inside a block, then they are accessible inside the block that they are defined in (and also any sub-blocks) but not outside the block
              .grid-item.justify-self-center
                code.language-javascript.
                  let a = 12;

                  function myFunction() {
                    console.log(a);
                    let b = 13;

                    if (true) {
                      let c = 14;
                      console.log(b);
                    }
                    console.log(c);
                  }
                  myFunction();

      section.yellow
        .layout-1
          header
            h1.title Declaring block scoped variables
          main
            .grid-container-fluid.cols-1
    script(src='build/build.js')
